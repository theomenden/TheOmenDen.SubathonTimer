@page "/connected"
@using TheOmenDen.SubathonTimer.Services

@inject ITimerService Timer
@inject TwitchUserState TwitchState
@inject NavigationManager Navigation

<PageTitle>Connected</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalGap="10" Width="100%">

    <FluentLabel Typo="Typography.PageTitle">Subathon Timer Dashboard</FluentLabel>

    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
        Current Time: @Timer.RemainingTime.ToString(@"hh\:mm\:ss")
    </FluentLabel>

    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">
        <FluentButton OnClick="@(() => Timer.AddManual(TimeSpan.FromMinutes(15)))">
            +15 minutes
        </FluentButton>
        <FluentButton OnClick="@(() => Timer.SubtractManual(TimeSpan.FromMinutes(5)))">
            -5 minutes
        </FluentButton>
    </FluentStack>

    <FluentDivider />

    <FluentLabel Typo="Typography.PageTitle">Define Twitch Event Rules</FluentLabel>

    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">
        <FluentTextField @bind-Value="NewRule.EventType" Placeholder="Event Type (e.g. channel.cheer)" />
        <FluentTextField @bind-Value="NewRule.ConditionKey" Placeholder="Condition Key (optional, e.g. bits)" />
        <FluentTextField @bind-Value="NewRule.ConditionValue" Placeholder="Condition Value (optional, e.g. 500)" />
        <FluentTextField @bind-Value="NewTime" Placeholder="Time to Add (hh:mm:ss)" />
        <FluentButton OnClick="AddRule">Add</FluentButton>
    </FluentStack>
    
    <FluentLabel Typo="Typography.PageTitle">Timer Controls</FluentLabel>

    <FluentStack Orientation="Orientation.Horizontal" VerticalGap="5">
        <FluentTextField @bind-Value="SetTimeValue" Placeholder="hh:mm:ss" />
        <FluentButton OnClick="SetTime">Set Timer</FluentButton>
        <FluentButton OnClick="Timer.Reset">Reset</FluentButton>
        <FluentButton OnClick="Timer.ZeroOut">Zero Out</FluentButton>
    </FluentStack>

    <FluentStack Orientation="Orientation.Vertical" HorizontalGap="8">
        @foreach (var rule in Timer.GetRules())
        {
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalGap="8">
                <FluentLabel Typo="Typography.Body">
                    @rule.EventType
                    @if (!string.IsNullOrWhiteSpace(rule.ConditionKey))
                    {
                        <span>(@rule.ConditionKey = @rule.ConditionValue)</span>
                    }
                    → +@rule.TimeToAdd
                </FluentLabel>

                <FluentButton Appearance="Appearance.Accent" OnClick="@(() => RemoveRule(rule))">
                    Remove
                </FluentButton>
            </FluentStack>
        }
    </FluentStack>


    <FluentDivider />

    <FluentLabel Typo="Typography.Subject">Your OBS Overlay URL</FluentLabel>
    <FluentTextField Value="@OverlayUrl" ReadOnly />
    <FluentButton OnClick="CopyOverlayUrl">Copy to Clipboard</FluentButton>

</FluentStack>

@code {
    private TwitchTimerRule NewRule = new() { EventType = TwitchConstants.TwitchEventTypes.Cheer};
    private string NewTime = String.Empty;

    private string OverlayUrl => 
        $"https://subathon.corvid.online/view/{TwitchState.User?.Id}";

    private void AddRule()
    {
        if (TimeSpan.TryParse(NewTime, out var ts))
        {
            Timer.AddRule(new TwitchTimerRule
            {
                EventType = NewRule.EventType,
                ConditionKey = NewRule.ConditionKey,
                ConditionValue = NewRule.ConditionValue,
                TimeToAdd = ts
            });

            // Reset input fields
            NewRule = new TwitchTimerRule {EventType = TwitchConstants.TwitchEventTypes.Cheer};
            NewTime = String.Empty;
        }
    }

    private string SetTimeValue = String.Empty;

    private void SetTime()
    {
        if (TimeSpan.TryParse(SetTimeValue, out var ts))
        {
            Timer.SetTime(ts);
            SetTimeValue = "";
        }
    }

    private void RemoveRule(TwitchTimerRule rule)
    {
        Timer.RemoveRule(rule);
    }

    private async Task CopyOverlayUrl()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", OverlayUrl);
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}
