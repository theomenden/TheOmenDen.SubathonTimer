@using TheOmenDen.SubathonTimer.Services
@inject TimerConfigService ConfigService

<FluentCard MinimalStyle="true">
    <FluentGrid Justify="JustifyContent.SpaceEvenly" AdaptiveRendering="true" Spacing="10">
        <FluentGridItem xs="12">
            <FluentCard MinimalStyle="true">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween"
                             VerticalAlignment="VerticalAlignment.SpaceBetween">
                    <FluentLabel Typo="Typography.H3">🛠️ Timer Config</FluentLabel>
                    <FluentSpacer />
                    <FluentButton Appearance="Appearance.Accent" Title="Save Current Config" OnClick="Save" IconEnd="@(new Icons.Color.Size24.Document())">Save</FluentButton>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentCard MinimalStyle="true">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">Timer Format</FluentLabel>
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentTextField Label="Display Format"
                                     Value="@Config.DisplayFormat"
                                     ValueChanged="v => Config = Config with { DisplayFormat = v }" />
                </FluentStack>
                <FluentSpacer Width="100" />
                <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
                <FluentSpacer Width="100" />
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentSelect TOption="FluentTheme"
                                  OptionText="ft => Enum.GetName(ft)"
                                  OptionValue="ft => ft.ToString()"
                                  Value="@_selectedTheme"
                                  ValueChanged="t => OnThemeChanged(t)"
                                  Items="@(Enum.GetValues<FluentTheme>())"
                                  Label="Theme" />

                    <FluentTextField Label="Font Size"
                                     Value="@Config.FontSize"
                                     ValueChanged="v => Config = Config with { FontSize = v }" />

                    <FluentTextField Label="Text Color"
                                     Value="@Config.Color"
                                     ValueChanged="v => Config = Config with { Color = v }" />
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
        <FluentGridItem xs="12" md="6">
            <FluentCard MinimalStyle="true">
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel Typo="Typography.H4" Color="Color.Neutral">Sub Boosts (in seconds)</FluentLabel>
                    <FluentSpacer Width="100" />
                    <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
                    <FluentSpacer Width="100" />
                    <FluentGrid AdaptiveRendering="true" Justify="JustifyContent.SpaceEvenly" Spacing="3">
                        @foreach (var tier in TwitchSubscriptionTier.All)
                        {
                            <FluentGridItem xs="12" md="6" xl="4">
                                <FluentNumberField Label="@tier.Name" AriaLabel="@tier.Name"
                                                   Appearance="FluentInputAppearance.Filled"
                                                   TValue="int"
                                                   Value="@Config.SubBoosts[tier]"
                                                   ValueChanged="v => UpdateSubBoost(tier, v)"/>

                            </FluentGridItem>
                        }
                    </FluentGrid>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
        <FluentGridItem xs="12" md="6">
            <FluentCard MinimalStyle="true">
                <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.SpaceBetween" HorizontalAlignment="HorizontalAlignment.Start">
                    <FluentLabel Typo="Typography.H4" Color="Color.Neutral">Bit Threshold Boosts</FluentLabel>
                    <FluentSpacer Width="100" />
                    <FluentDivider Orientation="Orientation.Horizontal" Role="DividerRole.Presentation" />
                    <FluentSpacer Width="100" />
                    <FluentGrid AdaptiveRendering="true" Justify="JustifyContent.SpaceEvenly" Spacing="3">
                        @foreach (var threshold in BitThreshold.All)
                        {
                            <FluentGridItem xs="12" md="6" xl="4" >
                                <FluentNumberField Label="@threshold.Name"
                                                   AriaLabel="@threshold.Name"
                                                   Appearance="FluentInputAppearance.Filled"
                                                   TValue="int"
                                                   Value="@GetBitsBoostValue(threshold)"
                                                   ValueChanged="v => UpdateBitsBoost(threshold, v)" />
                            </FluentGridItem>
                        }
                    </FluentGrid>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
</FluentCard>