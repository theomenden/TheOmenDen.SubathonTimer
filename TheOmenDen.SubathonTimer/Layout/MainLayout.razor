@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inherits LayoutComponentBase
<FluentDesignTheme @bind-Mode="@Mode"
                   @bind-OfficeColor="@OfficeColor"
                   OnLoaded="@OnLoaded"
                   OnLuminanceChanged="@OnLuminanceChanged"
                   StorageName="theme" />
<FluentLayout>
    <FluentHeader>
        <FluentLabel Typo="Typography.PageTitle" Color="Color.Neutral">Configurable Subathon Timer</FluentLabel>
        <FluentSpacer />
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
            <TwitchConnect />
        </FluentStack>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <ErrorBoundary>
                <ChildContent>
                    <div class="content">
                        @Body
                    </div>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>
@code
{
    [Inject] ILogger<MainLayout> Logger { get; init; } = default!;
    public DesignThemeModes Mode { get; set; } = DesignThemeModes.System;

    public OfficeColor? OfficeColor { get; set; } = Microsoft.FluentUI.AspNetCore.Components.OfficeColor.Teams;

    void OnLoaded(LoadedEventArgs e)
    {
        var mode = e.Mode == DesignThemeModes.System ? "System" : String.Empty;
        var luminance = e.IsDark ? "Dark" : "Light";
        Logger.LogInformation("Loaded: {Mode} {Luminance}", mode, luminance);
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        var mode = e.Mode == DesignThemeModes.System ? "System" : String.Empty;
        var luminance = e.IsDark ? "Dark" : "Light";
        Logger.LogInformation("Changed: {Mode} {Luminance}", mode, luminance);
    }
}